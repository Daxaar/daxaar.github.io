<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://www.octono.com</link>
    <atom:link href="http://www.octono.com/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Tue, 27 Oct 2015 12:36:06 +0000</pubDate>
    <lastBuildDate>Tue, 27 Oct 2015 12:36:06 +0000</lastBuildDate>

    
    
    <item>
      <title>Fixing Angular injector unpr Unknown provider</title>
      <link>http://www.octono.com/2015/10/27/angular-injector-unpr-unknown-provider/</link>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2015/10/27/angular-injector-unpr-unknown-provider</guid>
      <description>&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;
Error: [$injector:unpr] Unknown provider: SomeServiceProvider &amp;lt;- SomeService &amp;lt;- MainController
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TL;DR - Assuming you’ve checked you aren’t duplicating the module definition.  Make sure you’ve included the service module in the dependencies for the module containing the controller you’re unable to inject into.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;angular.module(&#39;MyApp&#39;,[&#39;other.module.here&#39;]).controller(...);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A little more detail…&lt;/p&gt;

&lt;p&gt;You find yourself staring at this error in the dev console and every answer on stackoverflow points to having declared the module incorrectly by redefining it rather than importing.&lt;/p&gt;

&lt;p&gt;Let’s look at how we arrive at this error in the first place.&lt;/p&gt;

&lt;p&gt;This is what you do to declare a new module and you must only do this once across your entire app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;angular.module(&#39;MyApp&#39;,[]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note the [] at the end.  Their inclusion means you’re defining a new module along with its dependencies that will be supplied in the brackets.  If the MyApp module has already been defined in another file &lt;strong&gt;it will be overwritten&lt;/strong&gt; thereby removing any components defined in those files from the module.&lt;/p&gt;

&lt;p&gt;So what is the correct way?&lt;/p&gt;

&lt;p&gt;Once you know you’ve declared your module, subsequent references to the module to declare services, controllers etc must therefore use the following form; sans brackets for deps (unless there are some, which is the key to this post!):  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;angular.module(&#39;MyApp&#39;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It’s this common mistake that all my google searches suggested was the cause of my problem after creating my &lt;strong&gt;first&lt;/strong&gt; service and trying to inject it into a controller.  However, after much investigation and head scratching this wasn’t the case.&lt;/p&gt;

&lt;p&gt;Here’s my app.js containing my applications &lt;em&gt;single&lt;/em&gt; controller and the &lt;em&gt;only&lt;/em&gt; place where the module ‘MyApp’ was defined.  Believe me, I checked this several times before concluding the duplicate module definition wasn’t my problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;angular.module(&#39;MyApp&#39;,[])
  .controller(&#39;MainController&#39;,MainController);

MainController.$inject = [&#39;SomeService&#39;];

function MainController(someService){
  //...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here’s my myservice.js containing the &lt;em&gt;one&lt;/em&gt; service in my app that I wish to inject.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;angular.module(&#39;another.module&#39;)
  .service(&#39;SomeService&#39;,SomeService);

function SomeService(){
  //...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strangely unit tests for verifying the injected service were passing.  It turns out, somewhat obviously after the fact (isn’t that always the case) that I have to inject the service module into the ‘MyApp’ module as a dependency.  So many answers online talk about removing the dependency brackets from the module definition I couldn’t see the woods for trees.&lt;/p&gt;

&lt;p&gt;So, to fix this issue all I had to do was:&lt;/p&gt;

&lt;p&gt;Change this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;angular.module(&#39;MyApp&#39;,[])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;angular.module(&#39;MyApp&#39;,[&#39;another.module&#39;])&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Configuring ssh keys</title>
      <link>http://www.octono.com/2015/09/27/ssh-key-setup/</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2015/09/27/ssh-key-setup</guid>
      <description>&lt;p&gt;In this post I’ll explain how to setup ssh keys on a Mac so you no longer have to enter a password when connecting to a remote machine (generally *nix based) using ssh.&lt;/p&gt;

&lt;p&gt;If you don’t have homebrew installed consider &lt;a href=&quot;http://brew.sh/&quot;&gt;doing so now&lt;/a&gt;.  To quote the authors: “It’s the missing package manager for OSX”.  Whilst not entirely necessary it will allow us to easily install the prerequisites.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code&gt;ssh-copy-id&lt;/code&gt; which allows us to upload the public key to the remote more easily.
&lt;br /&gt;&lt;br /&gt;&lt;code&gt;brew install ssh-copy-id&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create the public and private key pair file locally providing an optional password.  This will get stored under ~/.ssh.  Specifying a filename is optional.
&lt;br /&gt;&lt;br /&gt;&lt;code&gt;ssh-keygen&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we need to put the public key on the remote server.  The tool we installed in step 1 will allow us to easily do this. 
&lt;br /&gt;&lt;br /&gt;&lt;code&gt;ssh-copy-id user@serverip-or-name&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;That’s it!  &lt;code&gt;ssh&lt;/code&gt; onto the machine using the user you specified in step 3 and if all went well you’ll connect without having to provide a password.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Useful commands when connected via ssh</title>
      <link>http://www.octono.com/2015/09/20/ssh-helpers/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2015/09/20/ssh-helpers</guid>
      <description>&lt;p&gt;Copy a folder from the remote to local&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scp user@servernameorip:/path/to/remote/source/folder /path/to/local/destination/folder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.hypexr.org/linux_scp_help.php&quot;&gt;More Info Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More to come… &lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Choosing an Express Stack</title>
      <link>http://www.octono.com/2015/09/01/choosing-express-stack/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2015/09/01/choosing-express-stack</guid>
      <description>&lt;p&gt;For some time now I’ve been dabbling with express.  Nothing commercial but gaining enough knowledge to start edging towards competent.  One of the things I often wonder is how many teams actually start a new project with express from scratch with an &lt;code&gt;npm install express&lt;/code&gt; or &lt;code&gt;express init&lt;/code&gt; depending on your express flavour?  Does a new project really start here or would most developments teams start with their own internal pre-baked express install containing all the common middleware they’ll use such as passport etc?&lt;/p&gt;

&lt;p&gt;If they don’t follow this model how many choose to move slightly further up the abstraction chain and look at frameworks that sit on top of express such as MEAN or Sails.  For me it seems that if you’re going angular and mongo, MEAN is a no brainer but Sails doesn’t preclude this stack either.  Choices choices…&lt;/p&gt;

&lt;p&gt;This post will be updated further as I discover more.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Fixing a broken npm update</title>
      <link>http://www.octono.com/2015/04/18/uninstall-npm/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2015/04/18/uninstall-npm</guid>
      <description>&lt;p&gt;If you install node and npm using homebrew and later attempt to update npm using the following command you may find yourself “losing” your npm installation at the terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm update -g npm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The problem is caused by npm not playing well with the homebrew installation when trying to update itself.  After finding myself in this situation and following various accepted answers on StackOverflow without success, I eventually came across &lt;a href=&quot;https://gist.github.com/DanHerbert/9520689&quot;&gt;this gist&lt;/a&gt; on github that worked for me.  There’s a great explanation of the details of the issue or you can just dive straight into the solution.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>EACCES error on npm install with mean-cli</title>
      <link>http://www.octono.com/2015/04/18/npm-expressio-permissions/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2015/04/18/npm-expressio-permissions</guid>
      <description>&lt;p&gt;When generating a new mean application using the mean-cli generator available from &lt;a href=&quot;http://mean.io&quot;&gt;http://mean.io&lt;/a&gt; you may get the following error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EACCES, mkdir &#39;/Users/darren/tmp/npm-NNNNNNNN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where NNNNNNNN is a random alpha numeric.&lt;/p&gt;

&lt;p&gt;This is caused by the tmp folder being owned by root when it should be owned by the user (darren).  To fix this execute the following in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo chown -R `whoami` ~/tmp&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Fixing Jekyll "unresolved specs" error</title>
      <link>http://www.octono.com/2015/01/02/unresolved-specs-jekyll-error/</link>
      <pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2015/01/02/unresolved-specs-jekyll-error</guid>
      <description>&lt;p&gt;My Jekyll installation recently stopped working with following error when I tried to run &lt;code&gt;jekyll serve watch&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;WARN: Unresolved specs during Gem::Specification.reset:
      redcarpet (~&amp;gt; 3.1)
      jekyll-watch (~&amp;gt; 1.1)
      classifier-reborn (~&amp;gt; 2.0)
WARN: Clearing out unresolved specs.&lt;/p&gt;

&lt;p&gt;It would seem that there is an issue in one of the supporting gems.  As a workaround you can use the following command if you installed jekyll via bundler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bunble exec jekyll serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There’s a discussion of the issue &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/3084&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Safely delete files and folders in terminal</title>
      <link>http://www.octono.com/2014/12/24/delete-files-and-folders-in-terminal/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2014/12/24/delete-files-and-folders-in-terminal</guid>
      <description>&lt;p&gt;I discovered a useful command line tool today for OSX called trash.  It provides all the power of rm but without the ability to blow your leg off as it moves the affected files and folders to the trash rather than permanently deleting them.&lt;/p&gt;

&lt;p&gt;There are many on the forums who believe the power of rm is a good thing as it makes you think before hitting enter.  You can of course always use the -i option too.  Well yes I agree to some extent but we’re all human and I think the purists who hate to see GUI features creeping into the terminal need to take a step back sometimes. &lt;/p&gt;

&lt;p&gt;So, easiest way to get it is with homebrew:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install trash&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Jekyll Install Quick Tips</title>
      <link>http://www.octono.com/2014/12/24/Jekyll-Configuration/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2014/12/24/Jekyll-Configuration</guid>
      <description>&lt;p&gt;When running rake publish you get an error stating you should try running &lt;code&gt;bundle install&lt;/code&gt;.  I tried this but without success but if I just ran bundle this appeared to install a whole raft of gems but subsequently rake publish would then work…yay!&lt;/p&gt;

&lt;p&gt;If you get an error that you cannot push to master when using &lt;code&gt;rake publish&lt;/code&gt; change the url to your git repo to use http rather than ssh.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Blog Posts Incoming</title>
      <link>http://www.octono.com/2014/12/24/Incoming/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://www.octono.com/2014/12/24/Incoming</guid>
      <description>&lt;p&gt;For now they’re still over &lt;a href=&quot;http://frozenorange.wordpress.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    
    

  </channel> 
</rss>